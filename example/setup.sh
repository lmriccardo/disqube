#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'
LIST="${GREEN}[+]${NC}"

# Take the compose file as input to the script and check
# whether the input parameter is a file or not
composefile=$1

if [[ ! -e "${composefile}" || ! -f "${composefile}" ]];
then
	echo -e "${RED}Input file must be a docker compose file${NC}"
	exit 1
fi

echo -e "${YELLOW}-------------------------------------------------------"
echo -e "${YELLOW}------------------ DOCKER COMPOSE ---------------------"
echo -e "${YELLOW}-------------------------------------------------------\n"

# Launch the docker compose creating the three containers
# each of them belonging to the specified subnet and listening
# for possible incoming connections from the qube-manager
docker compose -f ${composefile} up -d

# Take the name of the custom network created by docker compose
netname=$(docker network list --format '{{.Name}}' | \
		grep -Ev '^(bridge|host|none)$')

echo -e "\n${LIST} Custom network created with name: $netname"
echo -e "${LIST} Displaying containers name and IPv4 Addresses"
docker network inspect ${netname} | jq '.[] | .Containers[] | "\(.Name) \(.IPv4Address)"'

# We need to take the name of the new bridge interface
bridge_itf=br-$(docker network inspect ${netname} | jq '.[] | .Id' | cut -c2-13)
echo -e "\n${LIST} Displaying bridge ${bridge_itf} Information"
sudo ip addr show ${bridge_itf}

echo -e "\n${YELLOW}----------------------------------------------------------"
echo -e "${YELLOW}------------------ NETWORK NAMESPACE ---------------------"
echo -e "${YELLOW}----------------------------------------------------------\n"

# Creation of the new network namespace
sudo ip netns add net1
echo -e "${LIST} Created new network namespace named NET1"

# Creation of the new veth-pair, veth1 on net1 namespace and
# r0-net1 belonging to the root namespace. The net1 end will
# have ip address 172.30.20.1 belonging to the subnet 
# 172.30.20.0 with subnet mask 255.255.255.0
sudo ip link add veth1 type veth peer name r0-net1
sudo ip link set veth1 netns net1
sudo ip netns exec net1 ip addr add 172.30.20.1/24 dev veth1
sudo ip netns exec net1 ip link set veth1 up
sudo ip netns exec net1 ip link set lo up
echo -e "${LIST} Created new veth pair (veth1 -> r0-net1) under the subnet 172.30.20.0/24"
sudo ip netns exec net1 ip addr show veth1

# Now we have also to assign an IP address to the r0-net1 end
# Its IP address will be the gateway of this subnet
sudo ip addr add 172.30.20.254/24 dev r0-net1
echo -e "\n${LIST} Assigned IP 172.30.20.254 to r0-net1"
sudo ip link set r0-net1 up
sudo ip addr show r0-net1

# Then we need to setup the route from the network namespace to the root one
sudo ip netns exec net1 ip route add default via 172.30.20.254
echo -e "\n${LIST} Route from net1 to root namespace via r0-net1 setup complete"
sudo ip netns exec net1 ip route

echo -e "\n${YELLOW}----------------------------------------------------"
echo -e "${YELLOW}------------------ ROUTING SETUP ---------------------"
echo -e "${YELLOW}------------------------------------------------------\n"

# We also need to enable IPv4 forwarding on the host, otherwise
# no packet generated by a different subnet will reach our containers
# since the host is rejecting forwarding packets by default
echo -e "\n${LIST} Enabling IPv4 forwarding on the host"
sudo sysctl -w net.ipv4.ip_forward=1

# Finally, we need to add rules to the iptables
echo -e "${LIST} Installing iptables and ping utilities"
sudo apt-get install -y iptables iputils-ping

echo -e "\n${LIST} Adding iptables FORWARD rule from r0-net1 to the docker custom bridge"
sudo iptables -A FORWARD -i r0-net1 -o ${bridge_itf} -j ACCEPT
sudo iptables -t nat -A POSTROUTING -s 172.30.20.0/24 ! -o r0-net1 -j MASQUERADE

echo -e "${LIST} Final iptables setup"
sudo iptables -S -v | grep r0-net1
sudo iptables -S -t nat | grep r0-net1

echo -e "\n${YELLOW}-----------------------------------------------------------"
echo -e "${YELLOW}------------------ CONNECTIVITY TESTING ---------------------"
echo -e "${YELLOW}-------------------------------------------------------------\n"

echo -e "\n${LIST} Testing connectivity between host, net1 and docker containers"
echo -e "Root namespace -> net1"
ping -c3 172.30.20.1

echo -e "\nRoot namespace -> docker container"
ping -c3 172.30.10.2

echo -e "\nnet1 -> docker container"
sudo ip netns exec net1 ping -c3 172.30.10.2

echo -e "\nPress Enter to terminate containers and clean up the namespace"
read

echo -e "\n${LIST} Cleaning up the namespace ..."
docker compose -f ${composefile} down
sudo ip netns delete net1
sudo iptables -D FORWARD -i r0-net1 -o ${bridge_itf} -j ACCEPT
sudo iptables -t nat -D POSTROUTING -s 172.30.20.0/24 ! -o r0-net1 -j MASQUERADE


